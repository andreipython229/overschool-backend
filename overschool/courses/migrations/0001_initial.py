# Generated by Django 5.2.5 on 2025-08-11 18:18

import ckeditor.fields
import common_services.services.file_validation
import courses.models.students.students_table_info
import django.contrib.postgres.search
import django.db.models.deletion
import phonenumber_field.modelfields
import schools.models.core
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата и время, когда запись была создана', verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата, когда запись была последний раз обновлена', verbose_name='Обновлено')),
                ('answer_id', models.AutoField(editable=False, help_text='Уникальный идентификатор ответa', primary_key=True, serialize=False, verbose_name='ID Вопроса')),
                ('body', ckeditor.fields.RichTextField(help_text='HTML вариант ответа', verbose_name='Тело ответа')),
                ('is_correct', models.BooleanField(default=False, help_text='Правильный-True или неправильный-False', verbose_name='Тип ответа')),
                ('picture', models.ImageField(blank=True, max_length=300, null=True, upload_to=common_services.services.file_validation.TruncateFileName(300), validators=[common_services.services.file_validation.limit_image_size], verbose_name='Картинка')),
                ('answer_in_range', models.BooleanField(default=False, help_text='Характерно для числовых вопросв (Numerical)', verbose_name='Правильный ответ в диапазоне')),
                ('from_digit', models.BigIntegerField(default=0, help_text='В случае, если вопрос числовой (Numerical) и ответ в диапазоне', verbose_name='От')),
                ('to_digit', models.BigIntegerField(default=0, help_text='В случае, если вопрос числовой (Numerical) и ответ в диапазоне', verbose_name='До')),
            ],
            options={
                'verbose_name': 'Ответ',
                'verbose_name_plural': 'Ответы',
            },
        ),
        migrations.CreateModel(
            name='AudienceBlock',
            fields=[
                ('is_visible', models.BooleanField(default=True, help_text='Видимость в лендинге курса', verbose_name='Отображение блока')),
                ('position', models.IntegerField(help_text='Номер следования в столбце блоков', verbose_name='Позиция в порядке следования блоков')),
                ('can_up', models.BooleanField(help_text='Упирается ли блок в верхний край списка', verbose_name='Можно сместить блок вверх')),
                ('can_down', models.BooleanField(help_text='Упирается ли блок в нижний край списка', verbose_name='Можно сместить блок вниз')),
                ('id', models.AutoField(editable=False, help_text='Уникальный идентификатор блока целевая аудитория курса', primary_key=True, serialize=False, verbose_name='ID')),
                ('description', ckeditor.fields.RichTextField(blank=True, help_text='Описание блока', max_length=256, null=True, verbose_name='Описание блока')),
            ],
            options={
                'verbose_name': 'Блок с целевой аудиторией',
                'verbose_name_plural': 'Блоки с целевой аудиторией',
            },
        ),
        migrations.CreateModel(
            name='BaseLesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(blank=True, verbose_name='Порядок')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата и время, когда запись была создана', verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата, когда запись была последний раз обновлена', verbose_name='Обновлено')),
                ('name', models.CharField(default='Имя не придумано', help_text='Название урока', max_length=256, verbose_name='Название урока')),
                ('points', models.PositiveIntegerField(default=0, help_text='Баллы за прохождение', verbose_name='Баллы за прохождение')),
                ('active', models.BooleanField(default=False, help_text='Определяет, виден ли урок, домашнее задание или тест всем кроме админа', verbose_name='Активный')),
            ],
            bases=(schools.models.core.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name='BaseLessonBlock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(blank=True, verbose_name='Порядок')),
                ('video', models.FileField(blank=True, help_text='Видеофайл размером до 2 ГБ', max_length=300, null=True, upload_to=common_services.services.file_validation.TruncateFileName(300), verbose_name='Видео')),
                ('video_screenshot', models.TextField(blank=True, help_text='Превью видео', null=True, verbose_name='Превью видео')),
                ('url', models.URLField(blank=True, help_text='Ссылка на видео из YouTube', null=True, verbose_name='URL видео')),
                ('description', ckeditor.fields.RichTextField(blank=True, help_text='Описание к уроку', null=True, verbose_name='Описание')),
                ('code', ckeditor.fields.RichTextField(blank=True, help_text='Примеры кода к уроку', null=True, verbose_name='Код')),
                ('language', models.CharField(blank=True, help_text='Язык программирования', max_length=200, null=True, verbose_name='Язык программирования')),
                ('picture', models.ImageField(blank=True, help_text='Картинка к уроку', null=True, upload_to=common_services.services.file_validation.TruncateFileName(300), verbose_name='Картинка')),
                ('formula', models.CharField(blank=True, help_text='Формула', max_length=500, null=True, verbose_name='Формула')),
                ('type', models.CharField(choices=[('video', 'video'), ('picture', 'picture'), ('description', 'description'), ('code', 'code'), ('formula', 'formula'), ('buttons', 'buttons')], default='description', help_text='Тип блока', max_length=15, verbose_name='Тип блока')),
            ],
            options={
                'verbose_name': 'Блок урока',
                'verbose_name_plural': 'Блоки уроков',
            },
        ),
        migrations.CreateModel(
            name='BlockButton',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Текст кнопки', max_length=200, verbose_name='Текст кнопки')),
                ('link', models.URLField(blank=True, help_text='Ссылка для перехода по кнопке', max_length=500, null=True, verbose_name='Ссылка')),
                ('color', models.CharField(blank=True, help_text='Цвет кнопки', max_length=50, null=True, verbose_name='Цвет кнопки')),
            ],
            options={
                'verbose_name': 'Кнопка блока урока',
                'verbose_name_plural': 'Кнопки блока урока',
            },
        ),
        migrations.CreateModel(
            name='BlockCards',
            fields=[
                ('id', models.AutoField(editable=False, help_text='Уникальный идентификатор блока статистики курса', primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.IntegerField(default=0, help_text='Номер следования в списке карточек', verbose_name='Позиция в порядке следования карточек')),
                ('photo', models.ImageField(blank=True, help_text='Фотография для карточки', max_length=300, null=True, upload_to=common_services.services.file_validation.TruncateFileName(300), validators=[common_services.services.file_validation.limit_image_size], verbose_name='Фотография')),
                ('title', ckeditor.fields.RichTextField(blank=True, help_text='Название карточки', max_length=256, null=True, verbose_name='Название карточки')),
                ('description', ckeditor.fields.RichTextField(blank=True, help_text='Описание карточки', max_length=256, null=True, verbose_name='Описание карточки')),
            ],
            options={
                'verbose_name': 'Карточка блока',
                'verbose_name_plural': 'Карточки блока',
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(help_text='Содержание комментария', verbose_name='Содержание комментария')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата создания комментария', verbose_name='Дата создания комментария')),
                ('public', models.BooleanField(default=False, help_text='Опубликован ли комментарий', verbose_name='Опубликован ли комментарий')),
            ],
            options={
                'verbose_name': 'Комментарий',
                'verbose_name_plural': 'Комментарии',
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('order', models.IntegerField(blank=True, verbose_name='Порядок')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата и время, когда запись была создана', verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата, когда запись была последний раз обновлена', verbose_name='Обновлено')),
                ('course_id', models.AutoField(editable=False, help_text='Уникальный идентификатор курса', primary_key=True, serialize=False, verbose_name='Курс ID')),
                ('public', models.CharField(blank=True, choices=[('О', 'Опубликован'), ('Н', 'Не опубликован'), ('С', 'Скрыт настройками курса')], default='Н', help_text='Формат публикации курса, отображает статус (Опубликован, Не опубликован, Скрыт настройками курса)', max_length=256, null=True, verbose_name='Формат публикации курса')),
                ('is_catalog', models.BooleanField(default=False, help_text='Видимость в каталоге курсов', verbose_name='Видимость в каталоге курсов')),
                ('is_direct', models.BooleanField(default=False, help_text='Позволяет получить доступ к курсу по прямой ссылке', verbose_name='Доступ по прямой ссылке')),
                ('is_copy', models.BooleanField(default=False, help_text='Копия ли данный курс уже существующего', verbose_name='Копия ли данный курс уже существующего')),
                ('is_access', models.BooleanField(default=True, help_text='Есть ли доступ к копии курса', verbose_name='Есть ли доступ к копии курса')),
                ('name', models.CharField(blank=True, help_text='Главное название курса', max_length=256, null=True, verbose_name='Название курса')),
                ('format', models.CharField(blank=True, choices=[('ОФФ', 'Оффлайн'), ('ОН', 'Онлайн')], default='ОН', help_text='Формат курса, отображает формат обучения (Онлайн либо Оффлайн)', max_length=256, null=True, verbose_name='Формат курса')),
                ('duration_days', models.PositiveIntegerField(blank=True, help_text='Продолжительность курса в днях', null=True, verbose_name='Продолжительность курса')),
                ('price', models.DecimalField(blank=True, decimal_places=2, help_text='Цена курса в BYN', max_digits=15, null=True, verbose_name='Цена')),
                ('description', ckeditor.fields.RichTextField(blank=True, help_text='Описание курса для отображения, сохраняется в html', null=True, verbose_name='Описание')),
                ('photo', models.ImageField(blank=True, help_text='Главная фотография', max_length=300, null=True, upload_to=common_services.services.file_validation.TruncateFileName(300), validators=[common_services.services.file_validation.limit_image_size], verbose_name='Фотография')),
                ('course_removed', models.DateTimeField(blank=True, help_text='Дата и время помещения курса в корзину', null=True, verbose_name='Дата и время помещения курса в корзину')),
                ('search_vector', django.contrib.postgres.search.SearchVectorField(editable=False, null=True)),
            ],
            options={
                'verbose_name': 'Курс',
                'verbose_name_plural': 'Курсы',
            },
            bases=(schools.models.core.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name='CourseAppeals',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата и время, когда запись была создана', verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата, когда запись была последний раз обновлена', verbose_name='Обновлено')),
                ('id', models.AutoField(editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Имя', max_length=256, verbose_name='Имя')),
                ('email', models.EmailField(help_text='E-mail пользователя', max_length=254, verbose_name='E-mail пользователя')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(help_text='Телефон пользователя', max_length=128, region=None, verbose_name='Телефон пользователя')),
                ('message', models.TextField(blank=True, help_text='Сообщение', null=True, verbose_name='Сообщение')),
                ('is_read', models.BooleanField(default=False, help_text='Прочитано', verbose_name='Прочитано')),
            ],
            options={
                'verbose_name': 'Заявка на курс',
                'verbose_name_plural': 'Заявки на курс',
            },
        ),
        migrations.CreateModel(
            name='CourseCopy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course_id', models.IntegerField(blank=True, help_text='ID курса оригинала', null=True, verbose_name='ID курса оригинала')),
            ],
        ),
        migrations.CreateModel(
            name='CourseLanding',
            fields=[
                ('id', models.AutoField(editable=False, help_text='Уникальный идентификатор лендинга курса', primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'Блок с лендингом курса',
                'verbose_name_plural': 'Блоки с лендингом курсов',
            },
        ),
        migrations.CreateModel(
            name='Folder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Название папки', max_length=256, verbose_name='Название папка')),
            ],
            options={
                'verbose_name': 'Папка',
                'verbose_name_plural': 'Папки',
            },
        ),
        migrations.CreateModel(
            name='GroupCourseAccess',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'Доступ к курсу для группы',
                'verbose_name_plural': 'Доступы к курсам для групп',
            },
        ),
        migrations.CreateModel(
            name='HeaderBlock',
            fields=[
                ('is_visible', models.BooleanField(default=True, help_text='Видимость в лендинге курса', verbose_name='Отображение блока')),
                ('position', models.IntegerField(help_text='Номер следования в столбце блоков', verbose_name='Позиция в порядке следования блоков')),
                ('can_up', models.BooleanField(help_text='Упирается ли блок в верхний край списка', verbose_name='Можно сместить блок вверх')),
                ('can_down', models.BooleanField(help_text='Упирается ли блок в нижний край списка', verbose_name='Можно сместить блок вниз')),
                ('id', models.AutoField(editable=False, help_text='Уникальный идентификатор блока шапки курса', primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'Блок с шапкой',
                'verbose_name_plural': 'Блоки с шапкой',
            },
        ),
        migrations.CreateModel(
            name='LessonAvailability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('available', models.BooleanField(default=False, verbose_name='Доступен')),
                ('visible_timer', models.BooleanField(default=False, help_text='Показывать ли таймер доступа к уроку', verbose_name='Видимый таймер')),
                ('access_time', models.PositiveIntegerField(blank=True, help_text='Время доступа к уроку в часах', null=True, verbose_name='Время доступа')),
            ],
            options={
                'verbose_name': 'Доступность урока для студента',
                'verbose_name_plural': 'Доступность уроков для студентов',
            },
        ),
        migrations.CreateModel(
            name='LessonEnrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'Доступность урока для группы',
                'verbose_name_plural': 'Доступность урока для группы',
            },
        ),
        migrations.CreateModel(
            name='LinkButton',
            fields=[
                ('is_visible', models.BooleanField(default=True, help_text='Видимость в лендинге курса', verbose_name='Отображение блока')),
                ('position', models.IntegerField(help_text='Номер следования в столбце блоков', verbose_name='Позиция в порядке следования блоков')),
                ('can_up', models.BooleanField(help_text='Упирается ли блок в верхний край списка', verbose_name='Можно сместить блок вверх')),
                ('can_down', models.BooleanField(help_text='Упирается ли блок в нижний край списка', verbose_name='Можно сместить блок вниз')),
                ('id', models.AutoField(editable=False, help_text='Уникальный идентификатор блока цели обучения', primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Текст кнопки', max_length=200, verbose_name='Текст кнопки')),
                ('link', models.URLField(blank=True, help_text='Ссылка для перехода по кнопке', max_length=500, null=True, verbose_name='Ссылка')),
                ('color', models.CharField(blank=True, help_text='Цвет кнопки', max_length=50, null=True, verbose_name='Цвет кнопки')),
            ],
            options={
                'verbose_name': 'Кнопка со ссылками для редактора лендинга',
                'verbose_name_plural': 'Кнопки со ссылками для редактора лендинга',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата и время, когда запись была создана', verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата, когда запись была последний раз обновлена', verbose_name='Обновлено')),
                ('question_id', models.AutoField(editable=False, help_text='Уникальный идентификатор вопроса', primary_key=True, serialize=False, verbose_name='ID Вопроса')),
                ('question_type', models.CharField(choices=[('Text', 'Text'), ('TextPics', 'TextPics'), ('TextPic', 'TextPic'), ('Free', 'Free'), ('Numerical', 'Numerical')], default='Text', help_text='Тип вопроса, от него зависят и возможные поля вопроса', max_length=256, verbose_name='Тип')),
                ('body', ckeditor.fields.RichTextField(help_text='Тело вопроса', verbose_name='Вопрос')),
                ('picture', models.ImageField(blank=True, null=True, upload_to=common_services.services.file_validation.TruncateFileName(300), validators=[common_services.services.file_validation.limit_image_size], verbose_name='Картинка')),
                ('multiple_answer', models.BooleanField(default=False, help_text='Характерно для вопросов с множественным выбором ответов (TEXTPIC, TEXTPICS)', verbose_name='Множественный ответ')),
                ('is_any_answer_correct', models.BooleanField(default=False, help_text='Характерно для вопросов с свободным ответом (FREE)', verbose_name='Любой ответ - правильный')),
                ('only_whole_numbers', models.BooleanField(default=False, help_text='Характерно для числовых вопросов (Numerical)', verbose_name='Только для целых чисел')),
            ],
            options={
                'verbose_name': 'Вопрос',
                'verbose_name_plural': 'Вопросы',
            },
            bases=(schools.models.core.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name='RandomTestTests',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'Тесты для генерации',
                'verbose_name_plural': 'Тесты для генерации',
            },
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('order', models.IntegerField(blank=True, verbose_name='Порядок')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата и время, когда запись была создана', verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата, когда запись была последний раз обновлена', verbose_name='Обновлено')),
                ('section_id', models.AutoField(editable=False, help_text='Уникальный идентификатор раздела', primary_key=True, serialize=False, verbose_name='ID Раздела')),
                ('name', models.CharField(help_text='Название раздела курса', max_length=256, verbose_name='Название курса')),
            ],
            options={
                'verbose_name': 'Раздел',
                'verbose_name_plural': 'Разделы',
            },
            bases=(schools.models.core.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name='StatsBlock',
            fields=[
                ('is_visible', models.BooleanField(default=True, help_text='Видимость в лендинге курса', verbose_name='Отображение блока')),
                ('position', models.IntegerField(help_text='Номер следования в столбце блоков', verbose_name='Позиция в порядке следования блоков')),
                ('can_up', models.BooleanField(help_text='Упирается ли блок в верхний край списка', verbose_name='Можно сместить блок вверх')),
                ('can_down', models.BooleanField(help_text='Упирается ли блок в нижний край списка', verbose_name='Можно сместить блок вниз')),
                ('id', models.AutoField(editable=False, help_text='Уникальный идентификатор блока статистики курса', primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'Блок со статистикой',
                'verbose_name_plural': 'Блоки со статистикой',
            },
        ),
        migrations.CreateModel(
            name='StudentCourseProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('progress', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='StudentsGroup',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата и время, когда запись была создана', verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата, когда запись была последний раз обновлена', verbose_name='Обновлено')),
                ('group_id', models.AutoField(help_text='Уникальный идентификатор группы', primary_key=True, serialize=False, verbose_name='Группа ID')),
                ('name', models.CharField(help_text='Название группы', max_length=256, verbose_name='Название группы')),
                ('type', models.CharField(choices=[('WITH_TEACHER', 'С учителем'), ('WITHOUT_TEACHER', 'Без учителя')], default='WITH_TEACHER', help_text='Тип группы (С учителем / Без учителя)', max_length=20, verbose_name='Тип группы')),
                ('certificate', models.BooleanField(default=False, help_text='Могут ли участники этой группы видеть сертификаты', verbose_name='Доступ к сертификатам')),
                ('training_duration', models.PositiveIntegerField(default=0, help_text='Лимит продолжительности обучения в днях', verbose_name='Продолжительность обучения')),
            ],
            options={
                'verbose_name': 'Группа студентов',
                'verbose_name_plural': 'Группы студентов',
            },
        ),
        migrations.CreateModel(
            name='StudentsGroupSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('strict_task_order', models.BooleanField(default=False, help_text="При 'True' - ученики данной группы не могут открывать уроки не по порядку", verbose_name='Строгая последовательность заданий')),
                ('task_submission_lock', models.BooleanField(default=False, help_text="При 'True' - ученики данной группы не могут отправлять домашки, они могут сделать его самостоятельно и перейти к следующему уроку", verbose_name='Блокировка отправки решений заданий')),
                ('submit_homework_to_go_on', models.BooleanField(default=False, help_text="При 'True' - ученики данной группы могут двигаться по курсу дальше только после отправки очередной выполненной домашней работы", verbose_name='Необходимость отправки д/з для перехода к следующим урокам')),
                ('submit_test_to_go_on', models.BooleanField(default=False, help_text="При 'True' - ученики данной группы не могут двигаться по курсу дальше, пока не отправят свой вариант прохождения очередного теста", verbose_name='Необходимость прохождения теста для перехода к следующим урокам')),
                ('success_test_to_go_on', models.BooleanField(default=False, help_text="При 'True' - ученики данной группы не могут двигаться по курсу дальше, пока не наберут необходимый процент правильных ответов очередного теста", verbose_name='Необходимость успешного прохождения теста для перехода к следующим урокам')),
                ('overai_lock', models.BooleanField(default=False, help_text="При 'True' - OVER AI включен для учеников данной группы", verbose_name='Блокировка доступа к OVER AI')),
                ('download', models.BooleanField(default=False, help_text="При 'True' - ученики данной группы могут скачивать видео-уроки", verbose_name='Возможность скачивания видео')),
            ],
            options={
                'verbose_name': 'Настройки группы студентов',
                'verbose_name_plural': 'Настройки группы студентов',
            },
        ),
        migrations.CreateModel(
            name='StudentsHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_added', models.DateTimeField(auto_now_add=True, help_text='Дата добавления в группу', verbose_name='Дата добавления в группу')),
                ('date_removed', models.DateTimeField(blank=True, help_text='Дата удаления из группы', null=True, verbose_name='Дата удаления из группы')),
                ('is_deleted', models.BooleanField(default=False, help_text='Студент удален из группы', verbose_name='Студент удален из группы')),
                ('finish_date', models.DateTimeField(blank=True, help_text='Дата завершения обучения', null=True, verbose_name='Дата завершения обучения')),
            ],
            options={
                'verbose_name': 'История студента',
                'verbose_name_plural': 'История студентов',
            },
        ),
        migrations.CreateModel(
            name='StudentsTableInfo',
            fields=[
                ('students_table_info_id', models.AutoField(editable=False, help_text='Уникальный идентификатор отображения информации о студентах', primary_key=True, serialize=False, verbose_name='ID отображения информации о студентах')),
                ('type', models.CharField(choices=[('School', 'School'), ('Course', 'Course'), ('Group', 'Group')], help_text='Может быть: School, Course, Group', max_length=10, verbose_name='Тип отображения таблицы')),
                ('students_table_info', models.JSONField(default=courses.models.students.students_table_info.get_default_students_table_info, help_text='Отображение информации о студентах', verbose_name='Отображение информации о студентах')),
            ],
            options={
                'verbose_name': 'Отображение информации о студентах',
                'verbose_name_plural': 'Отображение информации о студентах',
            },
        ),
        migrations.CreateModel(
            name='TrainingDuration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата и время, когда запись была создана', verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата, когда запись была последний раз обновлена', verbose_name='Обновлено')),
                ('limit', models.PositiveIntegerField(default=0, help_text='Лимит продолжительности обучения в днях', verbose_name='Продолжительность обучения')),
                ('download', models.BooleanField(default=False, help_text="При 'True' - ученик может скачивать видео-уроки в процессе обучения в данной группе", verbose_name='Возможность скачивания видео')),
            ],
            options={
                'verbose_name': 'Продолжительность и иные особенности обучения',
                'verbose_name_plural': 'Продолжительность и иные особенности обучения',
            },
        ),
        migrations.CreateModel(
            name='TrainingProgram',
            fields=[
                ('is_visible', models.BooleanField(default=True, help_text='Видимость в лендинге курса', verbose_name='Отображение блока')),
                ('position', models.IntegerField(help_text='Номер следования в столбце блоков', verbose_name='Позиция в порядке следования блоков')),
                ('can_up', models.BooleanField(help_text='Упирается ли блок в верхний край списка', verbose_name='Можно сместить блок вверх')),
                ('can_down', models.BooleanField(help_text='Упирается ли блок в нижний край списка', verbose_name='Можно сместить блок вниз')),
                ('id', models.AutoField(editable=False, help_text='Уникальный идентификатор блока программа обучения курса', primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'Блок с программой обучения',
                'verbose_name_plural': 'Блоки с программой обучения',
            },
        ),
        migrations.CreateModel(
            name='TrainingPurpose',
            fields=[
                ('is_visible', models.BooleanField(default=True, help_text='Видимость в лендинге курса', verbose_name='Отображение блока')),
                ('position', models.IntegerField(help_text='Номер следования в столбце блоков', verbose_name='Позиция в порядке следования блоков')),
                ('can_up', models.BooleanField(help_text='Упирается ли блок в верхний край списка', verbose_name='Можно сместить блок вверх')),
                ('can_down', models.BooleanField(help_text='Упирается ли блок в нижний край списка', verbose_name='Можно сместить блок вниз')),
                ('id', models.AutoField(editable=False, help_text='Уникальный идентификатор блока цели обучения', primary_key=True, serialize=False, verbose_name='ID')),
                ('description', ckeditor.fields.RichTextField(blank=True, help_text='Описание блока', max_length=256, null=True, verbose_name='Описание блока')),
            ],
            options={
                'verbose_name': 'Блок с целью обучения обучения',
                'verbose_name_plural': 'Блоки с целью обучения обучения',
            },
        ),
        migrations.CreateModel(
            name='UserHomework',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата и время, когда запись была создана', verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата, когда запись была последний раз обновлена', verbose_name='Обновлено')),
                ('user_homework_id', models.AutoField(editable=False, help_text='Уникальный идентификатор выполненной домашней работы', primary_key=True, serialize=False, verbose_name='ID выполненного домашнего задания')),
                ('text', models.TextField(blank=True, help_text='Ответ ученика на домашнее задание', null=True, verbose_name='Ответ ученика')),
                ('status', models.CharField(choices=[('Ждет проверки', 'Ждет проверки'), ('Отклонено', 'Отклонено'), ('Принято', 'Принято')], default='Ждет проверки', help_text='Статус отправленной домашки', max_length=256, verbose_name='Статус')),
                ('mark', models.IntegerField(blank=True, help_text='Отметка за домашнюю работу', null=True, verbose_name='Отметка')),
            ],
            options={
                'verbose_name': 'Сданная домашка',
                'verbose_name_plural': 'Сданные домашки',
            },
        ),
        migrations.CreateModel(
            name='UserHomeworkCheck',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата и время, когда запись была создана', verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата, когда запись была последний раз обновлена', verbose_name='Обновлено')),
                ('user_homework_check_id', models.AutoField(editable=False, help_text='Уникальный идентификатор проверки домашней работы', primary_key=True, serialize=False, verbose_name='ID истории проверки домашнего задания')),
                ('text', models.TextField(blank=True, help_text='Ответ ученика или учителя на домашнее задание', null=True, verbose_name='Ответ ученика или учителя')),
                ('status', models.CharField(choices=[('Ждет проверки', 'Ждет проверки'), ('Отклонено', 'Отклонено'), ('Принято', 'Принято')], default='Ждет проверки', help_text='Статус отправленной домашки', max_length=256, verbose_name='Статус')),
                ('mark', models.IntegerField(blank=True, help_text='Отметка за домашнюю работу', null=True, verbose_name='Отметка')),
            ],
            options={
                'verbose_name': 'История проверки домашки юзера',
                'verbose_name_plural': 'Истории проверки домашки юзера',
            },
        ),
        migrations.CreateModel(
            name='UserProgressLogs',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата и время, когда запись была создана', verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата, когда запись была последний раз обновлена', verbose_name='Обновлено')),
                ('user_progress_id', models.AutoField(editable=False, help_text='Уникальный идентификатор прогресса', primary_key=True, serialize=False, verbose_name='ID прогресса')),
                ('viewed', models.BooleanField(default=False, help_text='Статус открытия и просмотра lesson, homework, test', verbose_name='Статус открытия и просмотра lesson, homework, test')),
                ('completed', models.BooleanField(default=False, help_text='Статус выполнения ДЗ или Теста', verbose_name='Статус выполнения ДЗ или Теста')),
            ],
            options={
                'verbose_name': 'Прогресс юзера',
                'verbose_name_plural': 'Прогрессы юзеров',
            },
        ),
        migrations.CreateModel(
            name='UserTest',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата и время, когда запись была создана', verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата, когда запись была последний раз обновлена', verbose_name='Обновлено')),
                ('user_test_id', models.AutoField(editable=False, help_text='Уникальный идентификатор сданного теста', primary_key=True, serialize=False, verbose_name='ID сданного теста')),
                ('success_percent', models.DecimalField(decimal_places=2, help_text='Процент правильных ответов, которые ввёл ученик ученик', max_digits=10, verbose_name='Процент(%) правильных ответов')),
                ('status', models.BooleanField(default=False, help_text='Статус, отображающий пройден ли тест учеником', verbose_name='Статус')),
                ('start_time', models.DateTimeField(blank=True, help_text='Время, когда пользователь начал проходить тест', null=True, verbose_name='Время начала теста')),
            ],
            options={
                'verbose_name': 'Сданный тест',
                'verbose_name_plural': 'Сданные тесты',
            },
        ),
        migrations.CreateModel(
            name='Homework',
            fields=[
                ('baselesson_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, to='courses.baselesson')),
                ('homework_id', models.AutoField(help_text='Уникальный идентификатор домашнего задания', primary_key=True, serialize=False, verbose_name='ID домашнего задания')),
                ('automate_accept', models.BooleanField(default=False, help_text='После отправки учеником работы спустя указанное кол-во временибудет автоматически поставлен зачёт', verbose_name='Автоматически принимать работы спустя время')),
                ('time_accept', models.DurationField(blank=True, help_text='Время через которое будет автоматически поставлен зачёт, формат: [DD] [HH:[MM:]]ss[.uuuuuu]', null=True, verbose_name='Поставить зачёт через')),
            ],
            options={
                'verbose_name': 'Домашнее задание',
                'verbose_name_plural': 'Домашние задания',
                'default_related_name': 'homeworks',
            },
            bases=('courses.baselesson',),
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('baselesson_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, to='courses.baselesson')),
                ('lesson_id', models.AutoField(editable=False, help_text='Уникальный идентификатор урока', primary_key=True, serialize=False, verbose_name='ID Урока')),
            ],
            options={
                'verbose_name': 'Урок',
                'verbose_name_plural': 'Уроки',
                'default_related_name': 'lessons',
            },
            bases=('courses.baselesson',),
        ),
        migrations.CreateModel(
            name='SectionTest',
            fields=[
                ('baselesson_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, to='courses.baselesson')),
                ('test_id', models.AutoField(editable=False, help_text='Уникальный идентификатор теста', primary_key=True, serialize=False, verbose_name='ID теста')),
                ('random_test_generator', models.BooleanField(default=False, help_text='Автоматическая генерация теста', verbose_name='Автотест')),
                ('num_questions', models.IntegerField(default=0, help_text='Количество вопросов для генерации теста', verbose_name='Количество вопросов')),
                ('success_percent', models.IntegerField(default=0, help_text='Процент правильных ответов для успешно пройденного теста', verbose_name='Проходной балл')),
                ('random_questions', models.BooleanField(default=False, verbose_name='Перемешать вопросы')),
                ('random_answers', models.BooleanField(default=False, verbose_name='Перемешать ответы')),
                ('show_right_answers', models.BooleanField(default=False, verbose_name='Показать правильные ответы')),
                ('attempt_limit', models.BooleanField(default=False, verbose_name='Ограничить количество попыток')),
                ('attempt_count', models.PositiveIntegerField(default=0, verbose_name='Кол-во попыток (если 0, то бесконечно)')),
                ('points_per_answer', models.PositiveIntegerField(default=1, verbose_name='Бал за каждый правильный ответ')),
                ('has_timer', models.BooleanField(default=False, help_text='Определяет, есть ли у теста ограничение по времени', verbose_name='Использовать таймер')),
                ('time_limit', models.DurationField(blank=True, help_text='Продолжительность таймера для теста (например, 10 минут)', null=True, verbose_name='Лимит времени')),
            ],
            options={
                'verbose_name': 'Тест',
                'verbose_name_plural': 'Тесты',
                'default_related_name': 'tests',
            },
            bases=('courses.baselesson', schools.models.core.CloneMixin),
        ),
    ]
