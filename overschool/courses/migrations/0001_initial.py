# Generated by Django 4.1.1 on 2023-10-05 11:43

import ckeditor.fields
import common_services.services.file_validation
import courses.models.students.students_table_info
import django.db.models.deletion
import model_clone.mixin
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Answer",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Дата и время, когда запись была создана",
                        verbose_name="Создано",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Дата, когда запись была последний раз обновлена",
                        verbose_name="Обновлено",
                    ),
                ),
                (
                    "answer_id",
                    models.AutoField(
                        editable=False,
                        help_text="Уникальный идентификатор ответa",
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID Вопроса",
                    ),
                ),
                (
                    "body",
                    ckeditor.fields.RichTextField(
                        help_text="HTML вариант ответа", verbose_name="Тело ответа"
                    ),
                ),
                (
                    "is_correct",
                    models.BooleanField(
                        default=False,
                        help_text="Правильный-True или неправильный-False",
                        verbose_name="Тип ответа",
                    ),
                ),
                (
                    "picture",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="",
                        validators=[
                            common_services.services.file_validation.limit_size
                        ],
                        verbose_name="Картинка",
                    ),
                ),
                (
                    "answer_in_range",
                    models.BooleanField(
                        default=False,
                        help_text="Характерно для числовых вопросв (Numerical)",
                        verbose_name="Правильный ответ в диапазоне",
                    ),
                ),
                (
                    "from_digit",
                    models.BigIntegerField(
                        default=0,
                        help_text="В случае, если вопрос числовой (Numerical) и ответ в диапазоне",
                        verbose_name="От",
                    ),
                ),
                (
                    "to_digit",
                    models.BigIntegerField(
                        default=0,
                        help_text="В случае, если вопрос числовой (Numerical) и ответ в диапазоне",
                        verbose_name="До",
                    ),
                ),
            ],
            options={
                "verbose_name": "Ответ",
                "verbose_name_plural": "Ответы",
            },
        ),
        migrations.CreateModel(
            name="BaseLesson",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order", models.IntegerField(blank=True, verbose_name="Порядок")),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Дата и время, когда запись была создана",
                        verbose_name="Создано",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Дата, когда запись была последний раз обновлена",
                        verbose_name="Обновлено",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        default="Имя не придумано",
                        help_text="Название урока",
                        max_length=256,
                        verbose_name="Название урока",
                    ),
                ),
                (
                    "description",
                    ckeditor.fields.RichTextField(
                        blank=True,
                        help_text="Описание к уроку",
                        null=True,
                        verbose_name="Описание",
                    ),
                ),
                (
                    "code",
                    ckeditor.fields.RichTextField(
                        blank=True,
                        help_text="Примеры кода к уроку",
                        null=True,
                        verbose_name="Код",
                    ),
                ),
                (
                    "video",
                    models.FileField(
                        blank=True,
                        help_text="Видеофайл размером до 2 ГБ",
                        null=True,
                        upload_to="",
                        verbose_name="Видео",
                    ),
                ),
                (
                    "points",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Баллы за прохождение",
                        verbose_name="Баллы за прохождение",
                    ),
                ),
                (
                    "active",
                    models.BooleanField(
                        default=False,
                        help_text="Определяет, виден ли урок, домашнее задание или тест всем кроме админа",
                        verbose_name="Активный",
                    ),
                ),
            ],
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="Course",
            fields=[
                ("order", models.IntegerField(blank=True, verbose_name="Порядок")),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Дата и время, когда запись была создана",
                        verbose_name="Создано",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Дата, когда запись была последний раз обновлена",
                        verbose_name="Обновлено",
                    ),
                ),
                (
                    "course_id",
                    models.AutoField(
                        editable=False,
                        help_text="Уникальный идентификатор курса",
                        primary_key=True,
                        serialize=False,
                        verbose_name="Курс ID",
                    ),
                ),
                (
                    "public",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("О", "Опубликован"),
                            ("Н", "Не опубликован"),
                            ("С", "Скрыт настройками курса"),
                        ],
                        default="Н",
                        help_text="Формат публикации курса, отображает статус (Опубликован, Не опубликован, Скрыт настройками курса)",
                        max_length=256,
                        null=True,
                        verbose_name="Формат публикации курса",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="Главное название курса",
                        max_length=256,
                        null=True,
                        verbose_name="Название курса",
                    ),
                ),
                (
                    "format",
                    models.CharField(
                        blank=True,
                        choices=[("ОФФ", "Оффлайн"), ("ОН", "Онлайн")],
                        default="ОН",
                        help_text="Формат курса, отображает формат обучения (Онлайн либо Оффлайн)",
                        max_length=256,
                        null=True,
                        verbose_name="Формат курса",
                    ),
                ),
                (
                    "duration_days",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Продолжительность курса в днях",
                        null=True,
                        verbose_name="Продолжительность курса",
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Цена курса в BYN",
                        max_digits=15,
                        null=True,
                        verbose_name="Цена",
                    ),
                ),
                (
                    "description",
                    ckeditor.fields.RichTextField(
                        blank=True,
                        help_text="Описание курса для отображения, сохраняется в html",
                        null=True,
                        verbose_name="Описание",
                    ),
                ),
                (
                    "photo",
                    models.ImageField(
                        blank=True,
                        help_text="Главная фотография",
                        null=True,
                        upload_to="",
                        validators=[
                            common_services.services.file_validation.limit_size
                        ],
                        verbose_name="Фотография",
                    ),
                ),
            ],
            options={
                "verbose_name": "Курс",
                "verbose_name_plural": "Курсы",
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="LessonComponentsOrder",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order", models.IntegerField(blank=True, verbose_name="Порядок")),
                (
                    "component_type",
                    models.CharField(
                        choices=[
                            ("Текст", "Текст"),
                            ("Код", "Код"),
                            ("Видео", "Видео"),
                            ("Текстовый файл", "Текстовый файл"),
                            ("Аудиофайл", "Аудиофайл"),
                        ],
                        help_text="Тип компонента урока, для которого определен порядок",
                        max_length=256,
                        verbose_name="Тип компонента",
                    ),
                ),
            ],
            options={
                "verbose_name": "Компонент урока с определенным номером по порядку",
                "verbose_name_plural": "Порядок компонентов внутри урока",
            },
        ),
        migrations.CreateModel(
            name="Question",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Дата и время, когда запись была создана",
                        verbose_name="Создано",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Дата, когда запись была последний раз обновлена",
                        verbose_name="Обновлено",
                    ),
                ),
                (
                    "question_id",
                    models.AutoField(
                        editable=False,
                        help_text="Уникальный идентификатор вопроса",
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID Вопроса",
                    ),
                ),
                (
                    "question_type",
                    models.CharField(
                        choices=[
                            ("Text", "Text"),
                            ("TextPics", "TextPics"),
                            ("TextPic", "TextPic"),
                            ("Free", "Free"),
                            ("Numerical", "Numerical"),
                        ],
                        default="Text",
                        help_text="Тип вопроса, от него зависят и возможные поля вопроса",
                        max_length=256,
                        verbose_name="Тип",
                    ),
                ),
                (
                    "body",
                    ckeditor.fields.RichTextField(
                        help_text="Тело вопроса", verbose_name="Вопрос"
                    ),
                ),
                (
                    "picture",
                    models.ImageField(
                        blank=True,
                        null=True,
                        upload_to="",
                        validators=[
                            common_services.services.file_validation.limit_size
                        ],
                        verbose_name="Картинка",
                    ),
                ),
                (
                    "is_any_answer_correct",
                    models.BooleanField(
                        default=False,
                        help_text="Характерно для вопросов с свободным ответом (FREE)",
                        verbose_name="Любой ответ - правильный",
                    ),
                ),
                (
                    "only_whole_numbers",
                    models.BooleanField(
                        default=False,
                        help_text="Характерно для числовых вопросов (Numerical)",
                        verbose_name="Только для целых чисел",
                    ),
                ),
            ],
            options={
                "verbose_name": "Вопрос",
                "verbose_name_plural": "Вопросы",
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="RandomTestTests",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
            ],
            options={
                "verbose_name": "Тесты для генерации",
                "verbose_name_plural": "Тесты для генерации",
            },
        ),
        migrations.CreateModel(
            name="Section",
            fields=[
                ("order", models.IntegerField(blank=True, verbose_name="Порядок")),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Дата и время, когда запись была создана",
                        verbose_name="Создано",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Дата, когда запись была последний раз обновлена",
                        verbose_name="Обновлено",
                    ),
                ),
                (
                    "section_id",
                    models.AutoField(
                        editable=False,
                        help_text="Уникальный идентификатор раздела",
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID Раздела",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Название раздела курса",
                        max_length=256,
                        verbose_name="Название курса",
                    ),
                ),
            ],
            options={
                "verbose_name": "Раздел",
                "verbose_name_plural": "Разделы",
            },
            bases=(model_clone.mixin.CloneMixin, models.Model),
        ),
        migrations.CreateModel(
            name="StudentsGroup",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Дата и время, когда запись была создана",
                        verbose_name="Создано",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Дата, когда запись была последний раз обновлена",
                        verbose_name="Обновлено",
                    ),
                ),
                (
                    "group_id",
                    models.AutoField(
                        help_text="Уникальный идентификатор группы",
                        primary_key=True,
                        serialize=False,
                        verbose_name="Группа ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Название группы",
                        max_length=256,
                        verbose_name="Название группы",
                    ),
                ),
            ],
            options={
                "verbose_name": "Группа студентов",
                "verbose_name_plural": "Группы студентов",
            },
        ),
        migrations.CreateModel(
            name="StudentsGroupSettings",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "strict_task_order",
                    models.BooleanField(
                        default=False,
                        help_text="При 'True' - ученики данной группы не могут открывать уроки не по порядку",
                        verbose_name="Строгая последовательность заданий",
                    ),
                ),
                (
                    "task_submission_lock",
                    models.BooleanField(
                        default=False,
                        help_text="При 'True' - ученики данной группы не могут отправлять домашки, они могут сделать его самостоятельно и перейти к следующему уроку",
                        verbose_name="Блокировка отправки решений заданий",
                    ),
                ),
            ],
            options={
                "verbose_name": "Настройки группы студентов",
                "verbose_name_plural": "Настройки группы студентов",
            },
        ),
        migrations.CreateModel(
            name="StudentsTableInfo",
            fields=[
                (
                    "students_table_info_id",
                    models.AutoField(
                        editable=False,
                        help_text="Уникальный идентификатор отображения информации о студентах",
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID отображения информации о студентах",
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("School", "School"),
                            ("Course", "Course"),
                            ("Group", "Group"),
                        ],
                        help_text="Может быть: School, Course, Group",
                        max_length=10,
                        verbose_name="Тип отображения таблицы",
                    ),
                ),
                (
                    "students_table_info",
                    models.JSONField(
                        default=courses.models.students.students_table_info.get_default_students_table_info,
                        help_text="Отображение информации о студентах",
                        verbose_name="Отображение информации о студентах",
                    ),
                ),
            ],
            options={
                "verbose_name": "Отображение информации о студентах",
                "verbose_name_plural": "Отображение информации о студентах",
            },
        ),
        migrations.CreateModel(
            name="UserHomework",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Дата и время, когда запись была создана",
                        verbose_name="Создано",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Дата, когда запись была последний раз обновлена",
                        verbose_name="Обновлено",
                    ),
                ),
                (
                    "user_homework_id",
                    models.AutoField(
                        editable=False,
                        help_text="Уникальный идентификатор выполненной домашней работы",
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID выполненного домашнего задания",
                    ),
                ),
                (
                    "text",
                    models.TextField(
                        blank=True,
                        help_text="Ответ ученика на домашнее задание",
                        null=True,
                        verbose_name="Ответ ученика",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("Ждет проверки", "Ждет проверки"),
                            ("Отклонено", "Отклонено"),
                            ("Принято", "Принято"),
                        ],
                        default="Ждет проверки",
                        help_text="Статус отправленной домашки",
                        max_length=256,
                        verbose_name="Статус",
                    ),
                ),
                (
                    "mark",
                    models.IntegerField(
                        blank=True,
                        help_text="Отметка за домашнюю работу",
                        null=True,
                        verbose_name="Отметка",
                    ),
                ),
            ],
            options={
                "verbose_name": "Сданная домашка",
                "verbose_name_plural": "Сданные домашки",
            },
        ),
        migrations.CreateModel(
            name="UserHomeworkCheck",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Дата и время, когда запись была создана",
                        verbose_name="Создано",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Дата, когда запись была последний раз обновлена",
                        verbose_name="Обновлено",
                    ),
                ),
                (
                    "user_homework_check_id",
                    models.AutoField(
                        editable=False,
                        help_text="Уникальный идентификатор проверки домашней работы",
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID истории проверки домашнего задания",
                    ),
                ),
                (
                    "text",
                    models.TextField(
                        blank=True,
                        help_text="Ответ ученика или учителя на домашнее задание",
                        null=True,
                        verbose_name="Ответ ученика или учителя",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("Ждет проверки", "Ждет проверки"),
                            ("Отклонено", "Отклонено"),
                            ("Принято", "Принято"),
                        ],
                        default="Ждет проверки",
                        help_text="Статус отправленной домашки",
                        max_length=256,
                        verbose_name="Статус",
                    ),
                ),
                (
                    "mark",
                    models.IntegerField(
                        blank=True,
                        help_text="Отметка за домашнюю работу",
                        null=True,
                        verbose_name="Отметка",
                    ),
                ),
            ],
            options={
                "verbose_name": "История проверки домашки юзера",
                "verbose_name_plural": "Истории проверки домашки юзера",
            },
        ),
        migrations.CreateModel(
            name="UserProgressLogs",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Дата и время, когда запись была создана",
                        verbose_name="Создано",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Дата, когда запись была последний раз обновлена",
                        verbose_name="Обновлено",
                    ),
                ),
                (
                    "user_progress_id",
                    models.AutoField(
                        editable=False,
                        help_text="Уникальный идентификатор прогресса",
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID прогресса",
                    ),
                ),
                (
                    "viewed",
                    models.BooleanField(
                        default=False,
                        help_text="Статус открытия и просмотра lesson, homework, test",
                        verbose_name="Статус открытия и просмотра lesson, homework, test",
                    ),
                ),
                (
                    "completed",
                    models.BooleanField(
                        default=False,
                        help_text="Статус выполнения ДЗ или Теста",
                        verbose_name="Статус выполнения ДЗ или Теста",
                    ),
                ),
            ],
            options={
                "verbose_name": "Прогресс юзера",
                "verbose_name_plural": "Прогрессы юзеров",
            },
        ),
        migrations.CreateModel(
            name="UserTest",
            fields=[
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Дата и время, когда запись была создана",
                        verbose_name="Создано",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Дата, когда запись была последний раз обновлена",
                        verbose_name="Обновлено",
                    ),
                ),
                (
                    "user_test_id",
                    models.AutoField(
                        editable=False,
                        help_text="Уникальный идентификатор сданного теста",
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID сданного теста",
                    ),
                ),
                (
                    "success_percent",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Процент правильных ответов, которые ввёл ученик ученик",
                        max_digits=10,
                        verbose_name="Процент(%) правильных ответов",
                    ),
                ),
                (
                    "status",
                    models.BooleanField(
                        default=False,
                        help_text="Статус, отображающий пройден ли тест учеником",
                        verbose_name="Статус",
                    ),
                ),
            ],
            options={
                "verbose_name": "Сданный тест",
                "verbose_name_plural": "Сданные тесты",
            },
        ),
        migrations.CreateModel(
            name="Homework",
            fields=[
                (
                    "baselesson_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        to="courses.baselesson",
                    ),
                ),
                (
                    "homework_id",
                    models.AutoField(
                        help_text="Уникальный идентификатор домашнего задания",
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID домашнего задания",
                    ),
                ),
                (
                    "automate_accept",
                    models.BooleanField(
                        default=False,
                        help_text="После отправки учеником работы спустя указанное кол-во временибудет автоматически поставлен зачёт",
                        verbose_name="Автоматически принимать работы спустя время",
                    ),
                ),
                (
                    "time_accept",
                    models.DurationField(
                        blank=True,
                        help_text="Время через которое будет автоматически поставлен зачёт, формат: [DD] [HH:[MM:]]ss[.uuuuuu]",
                        null=True,
                        verbose_name="Поставить зачёт через",
                    ),
                ),
            ],
            options={
                "verbose_name": "Домашнее задание",
                "verbose_name_plural": "Домашние задания",
                "default_related_name": "homeworks",
            },
            bases=("courses.baselesson",),
        ),
        migrations.CreateModel(
            name="Lesson",
            fields=[
                (
                    "baselesson_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        to="courses.baselesson",
                    ),
                ),
                (
                    "lesson_id",
                    models.AutoField(
                        editable=False,
                        help_text="Уникальный идентификатор урока",
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID Урока",
                    ),
                ),
            ],
            options={
                "verbose_name": "Урок",
                "verbose_name_plural": "Уроки",
                "default_related_name": "lessons",
            },
            bases=("courses.baselesson",),
        ),
        migrations.CreateModel(
            name="SectionTest",
            fields=[
                (
                    "baselesson_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        to="courses.baselesson",
                    ),
                ),
                (
                    "test_id",
                    models.AutoField(
                        editable=False,
                        help_text="Уникальный идентификатор теста",
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID теста",
                    ),
                ),
                (
                    "random_test_generator",
                    models.BooleanField(
                        default=False,
                        help_text="Автоматическая генерация теста",
                        verbose_name="Автотест",
                    ),
                ),
                (
                    "num_questions",
                    models.IntegerField(
                        default=0,
                        help_text="Количество вопросов для генерации теста",
                        verbose_name="Количество вопросов",
                    ),
                ),
                (
                    "success_percent",
                    models.IntegerField(
                        default=0,
                        help_text="Процент правильных ответов для успешно пройденного теста",
                        verbose_name="Проходной балл",
                    ),
                ),
                (
                    "random_questions",
                    models.BooleanField(
                        default=False, verbose_name="Перемешать вопросы"
                    ),
                ),
                (
                    "random_answers",
                    models.BooleanField(
                        default=False, verbose_name="Перемешать ответы"
                    ),
                ),
                (
                    "show_right_answers",
                    models.BooleanField(
                        default=False, verbose_name="Показать правильные ответы"
                    ),
                ),
                (
                    "attempt_limit",
                    models.BooleanField(
                        default=False, verbose_name="Ограничить количество попыток"
                    ),
                ),
                (
                    "attempt_count",
                    models.PositiveIntegerField(
                        default=0, verbose_name="Кол-во попыток (если 0, то бесконечно)"
                    ),
                ),
                (
                    "points_per_answer",
                    models.PositiveIntegerField(
                        default=1, verbose_name="Бал за каждый правильный ответ"
                    ),
                ),
            ],
            options={
                "verbose_name": "Тест",
                "verbose_name_plural": "Тесты",
                "default_related_name": "tests",
            },
            bases=("courses.baselesson", model_clone.mixin.CloneMixin),
        ),
    ]
