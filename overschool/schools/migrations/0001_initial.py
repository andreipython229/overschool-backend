# Generated by Django 5.2.5 on 2025-08-11 18:18

import ckeditor.fields
import common_services.services.file_validation
import django.contrib.postgres.search
import django.core.validators
import django.db.models.deletion
import phonenumber_field.modelfields
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('courses', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='BannerClick',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='Дата и время перехода', verbose_name='Дата и время перехода')),
            ],
            options={
                'verbose_name': 'Переход по баннеру',
                'verbose_name_plural': 'Переходы по баннерам',
            },
        ),
        migrations.CreateModel(
            name='Bonus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата и время, когда запись была создана', verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата, когда запись была последний раз обновлена', verbose_name='Обновлено')),
                ('logo', models.ImageField(blank=True, help_text='Логотип акции', max_length=300, null=True, upload_to=common_services.services.file_validation.TruncateFileName(300), validators=[common_services.services.file_validation.limit_image_size], verbose_name='Логотип')),
                ('text', models.TextField(blank=True, help_text='Описание акции', null=True, verbose_name='Описание')),
                ('link', models.URLField(verbose_name='Ссылка на акцию')),
                ('expire_date', models.DateTimeField(help_text='Дата и время окончания акции', verbose_name='Дата и время окончания акции')),
                ('active', models.BooleanField(default=False, help_text='Определяет, активирован ли бонус', verbose_name='Активный')),
                ('search_vector', django.contrib.postgres.search.SearchVectorField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Бонус',
                'verbose_name_plural': 'Бонусы',
            },
        ),
        migrations.CreateModel(
            name='Box',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('icon', models.ImageField(blank=True, help_text='Иконка коробки', max_length=300, null=True, upload_to=common_services.services.file_validation.TruncateFileName(300), validators=[common_services.services.file_validation.limit_image_size], verbose_name='Иконка коробки')),
                ('name', models.CharField(help_text='Название коробки', max_length=300, verbose_name='Название коробки')),
                ('price', models.DecimalField(decimal_places=2, help_text='Цена коробки', max_digits=10, verbose_name='Цена')),
                ('quantity', models.PositiveIntegerField(help_text='Количество коробок в наборе', verbose_name='Количество коробок в наборе')),
                ('bonus_quantity', models.PositiveIntegerField(default=0, help_text='Количество бонусных коробок', verbose_name='Бонусные коробки')),
                ('is_active', models.BooleanField(default=True, help_text='Активировать коробку', verbose_name='Статус активности')),
                ('auto_deactivation_time', models.DateTimeField(blank=True, help_text='Время авто деактивации коробки', null=True, verbose_name='Время авто деактивации')),
            ],
        ),
        migrations.CreateModel(
            name='BoxPrize',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Domain',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain_name', models.CharField(max_length=255, unique=True)),
                ('nginx_configured', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Домен',
                'verbose_name_plural': 'Домены',
            },
        ),
        migrations.CreateModel(
            name='InviteProgram',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=False, help_text='Активация программы', verbose_name='Активный')),
                ('link', models.URLField(blank=True, help_text='Реферальная ссылка', max_length=255, null=True, verbose_name='Ссылка')),
            ],
            options={
                'verbose_name': 'инвайт-программа',
                'verbose_name_plural': 'инвайт-программы',
            },
        ),
        migrations.CreateModel(
            name='NewsletterTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('template_name', models.CharField(max_length=255, verbose_name='Имя шаблона')),
                ('text', models.TextField(verbose_name='Текст шаблона')),
                ('delay_days', models.PositiveIntegerField(verbose_name='Количество дней после регистрации для рассылки')),
                ('is_public', models.BooleanField(default=False, verbose_name='Рассылать ли шаблон')),
                ('template_created_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата и время создания шаблона')),
            ],
            options={
                'verbose_name': 'Шаблон для рассылки',
                'verbose_name_plural': 'Шаблоны для рассылки',
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата и время, когда запись была создана', verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата, когда запись была последний раз обновлена', verbose_name='Обновлено')),
                ('amount', models.DecimalField(decimal_places=2, help_text='Сумма платежа', max_digits=10, verbose_name='Сумма')),
                ('invoice_no', models.IntegerField(default=0, help_text='Номер счета', null=True, verbose_name='Номер счета')),
                ('payment_status', models.CharField(choices=[('pending', 'В ожидании'), ('completed', 'Завершен'), ('failed', 'Неуспешен')], default='pending', max_length=50, verbose_name='Статус оплаты')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Prize',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('icon', models.ImageField(blank=True, help_text='Иконка приза', max_length=300, null=True, upload_to=common_services.services.file_validation.TruncateFileName(300), validators=[common_services.services.file_validation.limit_image_size], verbose_name='Иконка приза')),
                ('name', models.CharField(help_text='Название приза', max_length=300, verbose_name='Название приза')),
                ('drop_chance', models.FloatField(help_text='Шанс выпадения приза', verbose_name='Шанс выпадения (%)')),
                ('guaranteed_box_count', models.PositiveIntegerField(blank=True, help_text='Количество коробок для гарантированного приза', null=True, verbose_name='Количество коробок для гарантированного приза')),
                ('is_active', models.BooleanField(default=True, help_text='Активировать приз', verbose_name='Статус активности')),
            ],
        ),
        migrations.CreateModel(
            name='ProdamusPaymentLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Время создания ссылки', verbose_name='Время создания ссылки')),
                ('payment_link', models.CharField(blank=True, help_text='Ссылка для оплаты', max_length=700, null=True, verbose_name='Сформированная ссылка для оплаты')),
                ('api_key', models.CharField(default='', help_text='API-ключ', max_length=200, verbose_name='API-ключ')),
                ('do', models.CharField(help_text='Тип действий (link или pay)', max_length=20)),
                ('name', models.CharField(default=None, help_text='Наименование товара', max_length=200, verbose_name='Наименование товара')),
                ('price', models.DecimalField(decimal_places=2, help_text='Цена товара', max_digits=10)),
                ('quantity', models.PositiveIntegerField(help_text='Кол-во товара')),
                ('sys', models.CharField(blank=True, help_text='код системы интернет-магазина', max_length=100, null=True, verbose_name='код системы интернет-магазина')),
                ('sku', models.CharField(blank=True, help_text='ID товара в системе интернет-магазин', max_length=200, null=True, verbose_name='ID товара в системе интернет-магазин')),
                ('order_id', models.PositiveIntegerField(blank=True, help_text='Номер заказа в системе интернет-магазина', null=True)),
                ('customer_phone', models.CharField(blank=True, help_text='Можно сформировать ссылку на оплату не указывая номер телефона покупателя, он заполнит это поле самостоятельно в окне оплаты', max_length=20, null=True, verbose_name='Мобильный телефон клиента')),
                ('customer_email', models.EmailField(blank=True, help_text='Email клиента', max_length=254, null=True)),
                ('customer_extra', models.TextField(blank=True, help_text='Дополнительные данные', null=True)),
                ('tax_type', models.PositiveIntegerField(default=0, help_text='Ставка НДС')),
                ('tax_sum', models.DecimalField(blank=True, decimal_places=2, help_text='Сумма налога', max_digits=10, null=True)),
                ('payment_method', models.CharField(blank=True, help_text='Метод оплаты', max_length=2, null=True)),
                ('payment_object', models.CharField(blank=True, help_text='Тип оплачиваемой позиции', max_length=2)),
                ('subscription', models.PositiveIntegerField(blank=True, help_text='ID подписки', null=True)),
                ('subscription_date_start', models.DateTimeField(blank=True, help_text='Дата начала подписки', null=True)),
                ('vk_user_id', models.PositiveIntegerField(blank=True, help_text='ID пользователя VK', null=True)),
                ('vk_user_name', models.CharField(blank=True, help_text='Имя пользователя VK', max_length=200, null=True)),
                ('urlReturn', models.URLField(blank=True, help_text='URL для возврата пользователя без оплаты', null=True)),
                ('urlSuccess', models.URLField(blank=True, help_text='URL для возврата пользователя при успешной оплате', null=True)),
                ('urlNotification', models.URLField(blank=True, help_text='URL для уведомления интернет-магазина о поступлении оплаты по заказу. Для того, чтобы система учла этот параметр, также должен быть передан параметр sys', null=True)),
                ('discount_value', models.DecimalField(decimal_places=2, default=0.0, help_text='Сумма скидки на заказ', max_digits=10)),
                ('npd_income_type', models.CharField(blank=True, default='FROM_INDIVIDUAL', help_text='Тип плательщика', max_length=20)),
                ('npd_income_inn', models.PositiveIntegerField(blank=True, help_text='ИНН плательщика', null=True)),
                ('npd_income_company', models.CharField(blank=True, help_text='Название компании плательщика', max_length=200, null=True)),
                ('link_expired', models.DateTimeField(blank=True, help_text='Срок действия ссылки', null=True)),
                ('paid_content', models.TextField(blank=True, help_text='Текст для пользователя после оплаты', null=True)),
                ('ref', models.CharField(blank=True, help_text='идентификатор партнера (ПРОМОКОД)', max_length=40, null=True)),
                ('type', models.CharField(blank=True, help_text='Если передано значение json, то ответ от Продамуса придет в формате json', max_length=40, null=True)),
                ('callbackType', models.CharField(blank=True, help_text='Если передано значение json, то веб-хуки от Продамуса будут приходить в формате json', max_length=40, null=True)),
                ('currency', models.CharField(blank=True, help_text='Валюта платежа. Возможные значения: rub, usd, eur, kzt', max_length=10, null=True)),
                ('payments_limit', models.PositiveIntegerField(blank=True, help_text='Лимит оплат по сформированной ссылке', null=True, verbose_name='Лимит оплат по сформированной ссылке')),
                ('acquiring', models.CharField(blank=True, help_text='Эквайринг.Возможные значения: sbrf, monet, qiwi, xpay, xpaykz', max_length=40, null=True, verbose_name='Эквайринг')),
                ('signature', models.CharField(blank=True, help_text='Подпись, создаваемая на основе секретного ключа и данных для создания ссылки', max_length=64, null=True, verbose_name='Подпись запроса')),
            ],
            options={
                'verbose_name': 'Ссылка на платеж Prodamus',
                'verbose_name_plural': 'Ссылки на платежи Prodamus',
            },
        ),
        migrations.CreateModel(
            name='PromoCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('discount', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('uses_count', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0)])),
            ],
            options={
                'verbose_name': 'Промокод',
                'verbose_name_plural': 'Промокоды',
            },
        ),
        migrations.CreateModel(
            name='Referral',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата и время создания реферала', verbose_name='Дата и время создания реферала')),
            ],
            options={
                'verbose_name': 'Реферал',
                'verbose_name_plural': 'Рефералы',
            },
        ),
        migrations.CreateModel(
            name='ReferralClick',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField(help_text='IP-адрес, с которого был совершен переход', verbose_name='IP-адрес')),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='Дата и время перехода', verbose_name='Дата и время перехода')),
                ('user_agent', models.TextField(blank=True, help_text='Информация о браузере и системе пользователя', null=True, verbose_name='User Agent')),
            ],
            options={
                'verbose_name': 'Переход по реферальной ссылке',
                'verbose_name_plural': 'Переходы по реферальным ссылкам',
            },
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('order', models.IntegerField(blank=True, verbose_name='Порядок')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата и время, когда запись была создана', verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата, когда запись была последний раз обновлена', verbose_name='Обновлено')),
                ('school_id', models.AutoField(editable=False, help_text='Уникальный идентификатор школы', primary_key=True, serialize=False, verbose_name='ID школы')),
                ('referral_code', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Уникальный реферальный код школы', unique=True, verbose_name='Реферальный код')),
                ('name', models.CharField(help_text='Название школы', max_length=256, unique=True, verbose_name='Название')),
                ('used_trial', models.BooleanField(default=False, help_text='Флаг, указывающий, использовал ли пользователь пробный тариф', verbose_name='Пробный тариф использован')),
                ('purchased_tariff_end_date', models.DateTimeField(blank=True, help_text='Дата окончания оплаченного тарифа', null=True, verbose_name='Окончание оплаченного тарифа')),
                ('trial_end_date', models.DateTimeField(blank=True, help_text='Дата, когда пробный период истекает', null=True, verbose_name='Дата окончания пробного периода')),
                ('offer_url', models.URLField(blank=True, default='', null=True, verbose_name='url договора оферты')),
                ('contact_link', models.URLField(blank=True, help_text='Ссылка для связи с организатором курса по вопросам записи', null=True, verbose_name='Ссылка для связи')),
                ('test_course', models.BooleanField(default=False, help_text='Включен ли тестовый курс для админов', verbose_name='Включен ли тестовый курс для админов')),
                ('rebranding_enabled', models.BooleanField(default=False, help_text='Активировать ребрендинг школы', verbose_name='Ребрендинг активирован')),
                ('telegram_link', models.URLField(blank=True, help_text='Ссылка на Telegram', null=True, verbose_name='Ссылка на Telegram')),
                ('instagram_link', models.URLField(blank=True, help_text='Ссылка на Instagram', null=True, verbose_name='Ссылка на Instagram')),
                ('twitter_link', models.URLField(blank=True, help_text='Ссылка на Twitter', null=True, verbose_name='Ссылка на Twitter')),
                ('vk_link', models.URLField(blank=True, help_text='Ссылка на ВКонтакте', null=True, verbose_name='Ссылка на ВКонтакте')),
                ('youtube_link', models.URLField(blank=True, help_text='Ссылка на YouTube', null=True, verbose_name='Ссылка на YouTube')),
                ('extra_link', models.URLField(blank=True, help_text='Дополнительная ссылка на ресурс', null=True, verbose_name='Дополнительная ссылка')),
            ],
            options={
                'verbose_name': 'Школа',
                'verbose_name_plural': 'Школы',
            },
        ),
        migrations.CreateModel(
            name='SchoolBranding',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('platform_logo', models.ImageField(blank=True, null=True, upload_to='branding/logos/', verbose_name='Логотип платформы')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text='Номер телефона', max_length=128, null=True, region=None, verbose_name='Номер телефона')),
                ('unp', models.CharField(blank=True, max_length=20, null=True, verbose_name='УНП')),
                ('full_organization_name', models.CharField(blank=True, max_length=500, null=True, verbose_name='Полное название организации')),
                ('address', models.CharField(blank=True, max_length=500, null=True, verbose_name='Адрес')),
            ],
            options={
                'verbose_name': 'Ребрендинг школы',
                'verbose_name_plural': 'Ребрендинги школ',
            },
        ),
        migrations.CreateModel(
            name='SchoolDocuments',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stamp', models.FileField(blank=True, help_text='Печать школы', max_length=300, null=True, upload_to=common_services.services.file_validation.TruncateFileName(300), validators=[common_services.services.file_validation.limit_image_size], verbose_name='Печать школы')),
                ('signature', models.FileField(blank=True, help_text='Подпись школы', max_length=300, null=True, upload_to=common_services.services.file_validation.TruncateFileName(300), validators=[common_services.services.file_validation.limit_image_size], verbose_name='Подпись школы')),
            ],
            options={
                'verbose_name': 'Документы школы',
                'verbose_name_plural': 'Документы школ',
            },
        ),
        migrations.CreateModel(
            name='SchoolExpressPayLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('api_key', models.CharField(default=None, help_text='API-ключ', max_length=200, verbose_name='API-ключ')),
                ('invoice_no', models.IntegerField(default=0, help_text='Номер счета', null=True, verbose_name='Номер счета')),
                ('payment_link', models.CharField(default=None, help_text='Ссылка для оплаты', max_length=200, verbose_name='Ссылка для оплаты')),
                ('status', models.CharField(default=None, help_text='Статус оплаты', max_length=50, null=True, verbose_name='Статус оплаты')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Время создания ссылки', verbose_name='Время создания ссылки')),
                ('amount', models.DecimalField(decimal_places=2, help_text='Сумма оплаты', max_digits=15, verbose_name='Сумма оплаты')),
                ('currency', models.CharField(default=None, help_text='Код валюты', max_length=3, null=True, verbose_name='Код валюты')),
                ('first_name', models.CharField(default=None, help_text='Имя плательщика', max_length=60, null=True, verbose_name='Имя плательщика')),
                ('last_name', models.CharField(default=None, help_text='Фамилия плательщика', max_length=60, null=True, verbose_name='Фамилия плательщика')),
                ('patronymic', models.CharField(default=None, help_text='Отчество плательщика', max_length=60, null=True, verbose_name='Отчество плательщика')),
            ],
            options={
                'verbose_name': 'Ссылка на оплату',
                'verbose_name_plural': 'Ссылки на оплату',
            },
        ),
        migrations.CreateModel(
            name='SchoolHeader',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата и время, когда запись была создана', verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата, когда запись была последний раз обновлена', verbose_name='Обновлено')),
                ('header_id', models.AutoField(editable=False, help_text='Уникальный идентификатор шапки школы', primary_key=True, serialize=False, verbose_name='ID школы')),
                ('name', models.CharField(help_text='Главное название школы', max_length=256, unique=True, verbose_name='Название школы')),
                ('description', ckeditor.fields.RichTextField(blank=True, help_text='Описание школы для отображения, сохраняется в html', null=True, verbose_name='Описание')),
                ('logo_school', models.ImageField(blank=True, help_text='Фотография заголовка школы', max_length=300, null=True, upload_to=common_services.services.file_validation.TruncateFileName(300), validators=[common_services.services.file_validation.limit_image_size], verbose_name='Фотография')),
                ('photo_background', models.ImageField(blank=True, help_text='Фотография фона', max_length=300, null=True, upload_to=common_services.services.file_validation.TruncateFileName(300), validators=[common_services.services.file_validation.limit_image_size], verbose_name='Фотография')),
            ],
            options={
                'verbose_name': 'Шапка школы',
                'verbose_name_plural': 'Шапки школы',
            },
        ),
        migrations.CreateModel(
            name='SchoolMeetings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.URLField(verbose_name='Ссылка для перехода на митинг')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Описание миттинга')),
                ('title', models.CharField(blank=True, max_length=500, null=True, verbose_name='Название миттинга')),
                ('start_date', models.DateTimeField(help_text='Дата и время начала миттинга', verbose_name='Дата и время начала миттинга')),
            ],
            options={
                'verbose_name': 'Ссылка на митинг',
                'verbose_name_plural': 'Ссылки на митинг',
            },
        ),
        migrations.CreateModel(
            name='SchoolNewRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role_name', models.CharField(max_length=15, verbose_name='Название новой роли для пользователя (Админ, Учитель, Студент)')),
            ],
            options={
                'verbose_name': 'Новая роль пользователя',
                'verbose_name_plural': 'Новые роли пользователей',
            },
        ),
        migrations.CreateModel(
            name='SchoolPaymentMethod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_method', models.CharField(default=None, help_text='Метод оплаты', max_length=25, null=True, verbose_name='Метод оплаты')),
                ('payment_method_name', models.CharField(default=None, help_text='Название метода оплаты', max_length=100, verbose_name='Название метода оплаты')),
                ('account_no', models.CharField(blank=True, default=None, help_text='Номер лицевого счета', max_length=200, null=True, unique=True, verbose_name='Номер лицевого счета')),
                ('api_key', models.CharField(default=None, help_text='API-ключ', max_length=200, unique=True, verbose_name='API-ключ')),
                ('payment_url', models.URLField(blank=True, default=None, help_text='Ссылка платежного кабинета Продамус', max_length=250, null=True, verbose_name='URL платежного кабинета')),
            ],
            options={
                'verbose_name': 'Оплата',
                'verbose_name_plural': 'Оплата',
            },
        ),
        migrations.CreateModel(
            name='SchoolStatistics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'Статистика школы',
                'verbose_name_plural': 'Статистика школ',
            },
        ),
        migrations.CreateModel(
            name='SchoolStudentsTableSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_students_grouped', models.BooleanField(default=True, help_text='Сгруппированы ли студенты в таблице', verbose_name='Сгруппированы ли студенты в таблице')),
            ],
            options={
                'verbose_name': 'Настройки группировки студентов',
                'verbose_name_plural': 'Настройки группировки студентов',
            },
        ),
        migrations.CreateModel(
            name='SchoolTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task', models.CharField(choices=[('create_course', 'Создать свой курс'), ('create_first_lesson', 'Создать свой первый урок'), ('upload_video', 'Загрузить видео в урок'), ('publish_course', 'Опубликовать курс в каталоге'), ('add_first_staff', 'Добавить первого сотрудника'), ('create_first_group', 'Создать первую группу'), ('add_first_student', 'Добавить первого ученика')], max_length=50, verbose_name='Задача')),
                ('completed', models.BooleanField(default=False, verbose_name='Выполнено')),
            ],
            options={
                'verbose_name': 'Задача для школы',
                'verbose_name_plural': 'Задачи для школ',
            },
        ),
        migrations.CreateModel(
            name='SentNewsletter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sent_at', models.DateTimeField(auto_now_add=True, verbose_name='Дата и время отправки')),
            ],
            options={
                'verbose_name': 'Отправленный шаблон',
                'verbose_name_plural': 'Отправленные шаблоны',
            },
        ),
        migrations.CreateModel(
            name='Tariff',
            fields=[
                ('id', models.AutoField(editable=False, help_text='Уникальный идентификатор тарифа', primary_key=True, serialize=False, verbose_name='ID тарифа')),
                ('name', models.CharField(choices=[('Junior', 'Junior'), ('Middle', 'Middle'), ('Senior', 'Senior')], default='Junior', max_length=10)),
                ('number_of_courses', models.IntegerField(blank=True, null=True, verbose_name='Количество курсов')),
                ('number_of_staff', models.IntegerField(blank=True, null=True, verbose_name='Количество сотрудников')),
                ('students_per_month', models.IntegerField(blank=True, null=True, verbose_name='Количество учеников в месяц')),
                ('total_students', models.IntegerField(blank=True, null=True, verbose_name='Общее количество учеников')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Цена')),
            ],
            options={
                'verbose_name': 'Тариф',
                'verbose_name_plural': 'Тарифы',
            },
        ),
        migrations.CreateModel(
            name='UserBox',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Дата и время, когда запись была создана', verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата, когда запись была последний раз обновлена', verbose_name='Обновлено')),
                ('unopened_count', models.PositiveIntegerField(default=0, verbose_name='Неоткрытые коробки')),
                ('opened_count', models.PositiveIntegerField(default=0, verbose_name='Открытые коробки')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserPrize',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_used', models.BooleanField(default=False, help_text='Приз использован', verbose_name='Использован')),
                ('received_at', models.DateTimeField(auto_now_add=True, help_text='Дата и время получения приза', verbose_name='Дата получения')),
            ],
        ),
        migrations.CreateModel(
            name='Banner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Заголовок баннера', max_length=255, verbose_name='Заголовок')),
                ('description', models.TextField(help_text='Описание баннера', verbose_name='Описание')),
                ('is_active', models.BooleanField(default=False, help_text='Активный баннер', verbose_name='Активный')),
                ('link', models.URLField(help_text='Ссылка на баннер', max_length=255, verbose_name='Ссылка')),
                ('groups', models.ManyToManyField(blank=True, related_name='banners', to='courses.studentsgroup', verbose_name='Группы')),
            ],
            options={
                'verbose_name': 'Баннер',
                'verbose_name_plural': 'Баннеры',
            },
        ),
        migrations.CreateModel(
            name='BannerAccept',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_accepted', models.BooleanField(default=False, help_text='Пользователь принял баннер', verbose_name='Пользователь принял баннер')),
                ('banner', models.ForeignKey(help_text='Баннер', on_delete=django.db.models.deletion.CASCADE, related_name='accepts', to='schools.banner', verbose_name='Баннер')),
            ],
            options={
                'verbose_name': 'Принятый баннер',
                'verbose_name_plural': 'Принятыe баннеры',
            },
        ),
    ]
