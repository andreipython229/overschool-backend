# Generated by Django 4.0.6 on 2022-07-11 10:21

import ckeditor.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import embed_video.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(max_length=50, unique=True)),
                ('email', models.EmailField(blank=True, max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=True)),
                ('is_superuser', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Chat',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True, help_text='Дата и время, когда запись была создана', verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата, когда запись была последний раз обновлена', verbose_name='Обновлено')),
                ('chat_id', models.AutoField(editable=False, help_text='Уникальный идентификатор чата', primary_key=True, serialize=False, verbose_name='ID чата')),
                ('admin', models.ForeignKey(default=1, help_text='Пользователь, являющийся админом чата, по умолчанию - супер админ', on_delete=django.db.models.deletion.SET_DEFAULT, to=settings.AUTH_USER_MODEL, verbose_name='Админ')),
                ('participants', models.ManyToManyField(related_name='user_chat_mtm', to=settings.AUTH_USER_MODEL, verbose_name='Пользователи')),
            ],
            options={
                'verbose_name': 'Чат',
                'verbose_name_plural': 'Чаты',
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True, help_text='Дата и время, когда запись была создана', verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата, когда запись была последний раз обновлена', verbose_name='Обновлено')),
                ('course_id', models.AutoField(editable=False, help_text='Уникальный идентификатор курса', primary_key=True, serialize=False, verbose_name='Курс ID')),
                ('name', models.CharField(help_text='Главное название курса', max_length=256, verbose_name='Название курса')),
                ('duration_days', models.IntegerField(help_text='Продолжительность курса в днях', verbose_name='Продолжительность курса')),
                ('status', models.CharField(choices=[('НО', 'Не опубликован'), ('О', 'Опубликован')], default='НО', help_text='Статус курса, отображает состояние курса (опубликован - то сть используется юзерами, не опубликован - это ещё в разработке', max_length=256, verbose_name='Статус курса')),
                ('price', models.DecimalField(decimal_places=2, help_text='Цена курса в BYN', max_digits=15, verbose_name='Цена')),
                ('description', ckeditor.fields.RichTextField(help_text='Описание курса для отображения, сохраняется в html', verbose_name='Описание')),
                ('photo', models.ImageField(help_text='Главная фотография', upload_to='images/courses/main/', verbose_name='Фотография')),
            ],
            options={
                'verbose_name': 'Курс',
                'verbose_name_plural': 'Курсы',
            },
        ),
        migrations.CreateModel(
            name='Homework',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True, help_text='Дата и время, когда запись была создана', verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата, когда запись была последний раз обновлена', verbose_name='Обновлено')),
                ('homework_id', models.AutoField(help_text='Уникальный идентификатор домашнего задания', primary_key=True, serialize=False, verbose_name='ID домашнего задания')),
                ('text', ckeditor.fields.RichTextField(help_text='HTML вариан описания домашки', verbose_name='Описание домашнего задания')),
                ('file', models.FileField(help_text='Файл, в котором хранится вся небходимая информация для домашнего задания', upload_to='media/homework/task/files', verbose_name='Файл домашнего задания')),
            ],
            options={
                'verbose_name': 'Домашнее задание',
                'verbose_name_plural': 'Домашние задания',
            },
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True, help_text='Дата и время, когда запись была создана', verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата, когда запись была последний раз обновлена', verbose_name='Обновлено')),
                ('lesson_id', models.AutoField(editable=False, help_text='Уникальный идентификатор урока', primary_key=True, serialize=False, verbose_name='ID Урока')),
                ('name', models.CharField(help_text='Название урока', max_length=256, verbose_name='Название урока')),
                ('description', models.TextField(help_text='Описание к уроку', verbose_name='Описание')),
                ('video', embed_video.fields.EmbedVideoField(help_text='Сюда всталвяем ссылку на видос с ютуба, поэтому сначала его надо загрузить туда', verbose_name='Видео')),
                ('previous_lesson_id', models.ForeignKey(help_text='Предыдущий урок, если None, значит, этот урок первый', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='lesson_id_fk', to='lms_Users.lesson', verbose_name='Предыдущий урок')),
            ],
            options={
                'verbose_name': 'Урок',
                'verbose_name_plural': 'Уроки',
            },
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True, help_text='Дата и время, когда запись была создана', verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата, когда запись была последний раз обновлена', verbose_name='Обновлено')),
                ('test_id', models.AutoField(editable=False, help_text='Уникальный идентификатор теста', primary_key=True, serialize=False, verbose_name='ID Теста')),
                ('name', models.CharField(help_text='Название теста', max_length=256, verbose_name='Название')),
                ('success_percent', models.IntegerField(help_text='Процент правильных ответов для успешно пройденного теста', verbose_name='Проходной балл')),
                ('lesson_id', models.ForeignKey(help_text='Урок, после которого идёт данный тест', on_delete=django.db.models.deletion.CASCADE, related_name='lesson_test_id_fk', to='lms_Users.lesson', verbose_name='ID урока')),
            ],
            options={
                'verbose_name': 'Тест',
                'verbose_name_plural': 'Тесы',
            },
        ),
        migrations.CreateModel(
            name='UserTest',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True, help_text='Дата и время, когда запись была создана', verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата, когда запись была последний раз обновлена', verbose_name='Обновлено')),
                ('user_test_id', models.AutoField(editable=False, help_text='Уникальный идентификатор сданнаго теста', primary_key=True, serialize=False, verbose_name='ID сданнаго теста')),
                ('success_percent', models.DecimalField(decimal_places=2, help_text='Процент правильных ответов, которые ввёл ученик ученик', max_digits=10, verbose_name='Процент(%) правильных ответов')),
                ('status', models.CharField(choices=[('П', 'Прошёл'), ('Н', 'Не прошёл')], default='П', help_text='Статус, отображающий, пройден ли тест учеником', max_length=256, verbose_name='Статус')),
                ('test_id', models.ForeignKey(help_text='Уникальный идентификатор теста', on_delete=django.db.models.deletion.CASCADE, related_name='user_test_test_id_fk', to='lms_Users.test', verbose_name='ID теста')),
                ('user_id', models.ForeignKey(default=1, help_text='Уникальный идентификатор пользователя', on_delete=django.db.models.deletion.SET_DEFAULT, related_name='user_test_user_id_fk', to=settings.AUTH_USER_MODEL, verbose_name='ID пользователя')),
            ],
            options={
                'verbose_name': 'Сданный тест',
                'verbose_name_plural': 'Сданные тесты',
            },
        ),
        migrations.CreateModel(
            name='UserProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True, help_text='Дата и время, когда запись была создана', verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата, когда запись была последний раз обновлена', verbose_name='Обновлено')),
                ('course_id', models.ForeignKey(help_text='ID курса, который сейчас проходит ученик', on_delete=django.db.models.deletion.CASCADE, related_name='user_progress_course_id_fk', to='lms_Users.course', verbose_name='ID курса')),
                ('lesson_id', models.ForeignKey(help_text='ID курса, на котором сейчас находится ученик, если None значит, урок был удалён, либо ученик только начал', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='user_progress_lesson_id_fk', to='lms_Users.lesson', verbose_name='ID урока')),
                ('user_id', models.ForeignKey(default=1, help_text='ID ученика по прогрессу на курсе', on_delete=django.db.models.deletion.SET_DEFAULT, related_name='user_progress_user_id_fk', to=settings.AUTH_USER_MODEL, verbose_name='ID ученика')),
            ],
            options={
                'verbose_name': 'Надоело писать',
                'verbose_name_plural': 'Надоело писать 2',
            },
        ),
        migrations.CreateModel(
            name='UserHomework',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True, help_text='Дата и время, когда запись была создана', verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата, когда запись была последний раз обновлена', verbose_name='Обновлено')),
                ('user_homework_id', models.AutoField(editable=False, help_text='Уникальный идентификатор выполненной домашней работы', primary_key=True, serialize=False, verbose_name='ID выполненного домашнего задания')),
                ('text', models.TextField(help_text='Ответ ученика на домашнее задание', verbose_name='Ответ ученика')),
                ('status', models.CharField(choices=[('ПРИ', 'Пришёл'), ('ПРО', 'Проверен'), ('НЕП', 'Неправильно'), ('ПРА', 'Правильно')], default='ПРИ', help_text='Статус отправленной домашки', max_length=256, verbose_name='Статус')),
                ('file', models.FileField(help_text='Файл, в котором содержится ответ на домашнюю работу', upload_to='media/homework/task/answers', verbose_name='Файл ответа')),
                ('mark', models.IntegerField(blank=True, help_text='Отметка за домашнюю работу', null=True, verbose_name='Отметка')),
                ('teacher_message', models.TextField(blank=True, help_text='Комментарий преподавателя по проделанной работе', null=True, verbose_name='Комментарий')),
                ('homework_id', models.ForeignKey(help_text='ID домашнего задания, ответ на который прислали', on_delete=django.db.models.deletion.CASCADE, related_name='user_homework_homework_id_fk', to='lms_Users.homework', verbose_name='ID домашнего задания')),
                ('teacher_id', models.ForeignKey(default=1, help_text='Учитель, который проверял домашнюю работы', null=True, on_delete=django.db.models.deletion.SET_DEFAULT, related_name='user_homework_teacher_id_fk', to=settings.AUTH_USER_MODEL, verbose_name='ID учителя')),
                ('user_id', models.ForeignKey(default=1, help_text='ID ученика, выолнившего домашнюю работу', on_delete=django.db.models.deletion.SET_DEFAULT, related_name='user_homework_user_id_fk', to=settings.AUTH_USER_MODEL, verbose_name='ID ученика')),
            ],
            options={
                'verbose_name': 'Сданная домашка',
                'verbose_name_plural': 'Сданные домашки',
            },
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True, help_text='Дата и время, когда запись была создана', verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата, когда запись была последний раз обновлена', verbose_name='Обновлено')),
                ('section_id', models.AutoField(editable=False, help_text='Уникальный идентификатор раздела', primary_key=True, serialize=False, verbose_name='ID Раздела')),
                ('name', models.CharField(help_text='Название раздела курса', max_length=256, verbose_name='Название курса')),
                ('course_id', models.ForeignKey(help_text='ID курса раздела', on_delete=django.db.models.deletion.CASCADE, related_name='course_section_id_fk', to='lms_Users.course', verbose_name='ID курса')),
                ('previous_section_id', models.ForeignKey(help_text='ID предыдущего курса, если ID None - курс первый', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='section_id_fk', to='lms_Users.section', verbose_name='ID прошлого раздела')),
            ],
            options={
                'verbose_name': 'Раздел',
                'verbose_name_plural': 'Разделы',
            },
        ),
        migrations.CreateModel(
            name='Roles',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(max_length=20)),
                ('user_permissions', models.ManyToManyField(to='auth.permission')),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True, help_text='Дата и время, когда запись была создана', verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата, когда запись была последний раз обновлена', verbose_name='Обновлено')),
                ('question_id', models.AutoField(editable=False, help_text='Уникальный идентификатор вопроса', primary_key=True, serialize=False, verbose_name='ID Вопроса')),
                ('body', ckeditor.fields.RichTextField(help_text='Тело вопроса', verbose_name='Вопрос')),
                ('test_id', models.ForeignKey(help_text='Тест, к котрому приввязан вопрос', on_delete=django.db.models.deletion.CASCADE, related_name='question_test_id_fk', to='lms_Users.test', verbose_name='Тест')),
            ],
            options={
                'verbose_name': 'Вопрос',
                'verbose_name_plural': 'Вопросы',
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True, help_text='Дата и время, когда запись была создана', verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата, когда запись была последний раз обновлена', verbose_name='Обновлено')),
                ('message_id', models.AutoField(editable=False, help_text='Уникальный идентификатор сообщения', primary_key=True, serialize=False, verbose_name='ID сообщения')),
                ('text', models.TextField(help_text='Сообщение, которое было отправлено пользователем', max_length=500, verbose_name='Сообщение')),
                ('chat', models.ForeignKey(help_text='Чат, в котором было отправлено это сообщение', on_delete=django.db.models.deletion.CASCADE, related_name='message_chat_id_fk', to='lms_Users.chat', verbose_name='ID чата')),
                ('user', models.ForeignKey(default=1, help_text='Пользователь, отправивший сообщение', on_delete=django.db.models.deletion.SET_DEFAULT, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Сообщение',
                'verbose_name_plural': 'Сообщения',
            },
        ),
        migrations.AddField(
            model_name='lesson',
            name='section_id',
            field=models.ForeignKey(help_text='ID раздела курса', on_delete=django.db.models.deletion.CASCADE, related_name='section_lesson_id_fk', to='lms_Users.section', verbose_name='ID раздела'),
        ),
        migrations.AddField(
            model_name='homework',
            name='lesson_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='homework_lesson_id_fk', to='lms_Users.lesson', verbose_name='Домашнее задание'),
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True, help_text='Дата и время, когда запись была создана', verbose_name='Создано')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Дата, когда запись была последний раз обновлена', verbose_name='Обновлено')),
                ('answer_id', models.AutoField(editable=False, help_text='Уникальный идентификатор вопроса', primary_key=True, serialize=False, verbose_name='ID Вопроса')),
                ('body', ckeditor.fields.RichTextField(help_text='HTML вариант ответа', verbose_name='Тело ответа')),
                ('status', models.CharField(choices=[('П', 'Правильный'), ('Н', 'Неправильный')], default='П', help_text='Тип ответа: Правильный или неправильный или ещё какой', max_length=256, verbose_name='Тип ответа')),
                ('question_id', models.ForeignKey(help_text='Вопрос, к которому привязан ответ', on_delete=django.db.models.deletion.CASCADE, related_name='question_answer_id_fk', to='lms_Users.question', verbose_name='ID Вопроса')),
            ],
            options={
                'verbose_name': 'Ответ',
                'verbose_name_plural': 'Ответы',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='role',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lms_Users.roles'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
